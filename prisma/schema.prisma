// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model SpotifyUser {
  spotifyId String  @id
  email     String
  name      String
  image     String?

  grids  Grid[]
  charts Chart[]

  gridLikes GridLike[]
  chartLikes ChartLike[]
}

model Grid {
  id            String   @id @default(cuid())
  height        Int
  width         Int
  spotifyUserId String
  createdAt     DateTime @default(now())
  title         String

  albums      GridAlbum[]
  spotifyUser SpotifyUser @relation(fields: [spotifyUserId], references: [spotifyId])
  likes     GridLike[]
  savedCount Int      @default(0)
}

model GridAlbum {
  id       String @id @default(cuid())
  gridId   String
  albumId  String
  position Int
  grid     Grid   @relation(fields: [gridId], references: [id], onDelete: Cascade)
  album    Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@index([gridId])
  @@index([albumId])
}

model Album {
  id          String       @id @default(cuid())
  spotifyId   String       @unique
  name        String
  artist      String
  imageUrl    String
  grids       GridAlbum[]
  chartAlbums ChartAlbum[]
}

model Chart {
  id            String       @id @default(cuid())
  title         String
  description   String
  spotifyUserId String
  spotifyUser   SpotifyUser  @relation(fields: [spotifyUserId], references: [spotifyId])
  albums        ChartAlbum[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  likes         ChartLike[]

  @@index([spotifyUserId])
}

model ChartAlbum {
  id       String @id @default(cuid())
  chartId  String
  albumId  String
  position Int
  chart    Chart  @relation(fields: [chartId], references: [id], onDelete: Cascade)
  album    Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@index([chartId])
  @@index([albumId])
}

model SearchCache {
  key       String @id
  value     String
  timestamp BigInt
}

model GridLike {
    id        String   @id @default(cuid())
    userId    String
    gridId    String
  createdAt DateTime @default(now())
  user      SpotifyUser @relation(fields: [userId], references: [spotifyId], onDelete: Cascade)
  grid      Grid        @relation(fields: [gridId], references: [id], onDelete: Cascade)

  @@unique([userId, gridId])
}

model ChartLike {
    id        String   @id @default(cuid())
    userId    String
    chartId   String
  createdAt DateTime @default(now())
  user      SpotifyUser @relation(fields: [userId], references: [spotifyId], onDelete: Cascade)
  chart     Chart       @relation(fields: [chartId], references: [id], onDelete: Cascade)

  @@unique([userId, chartId])
}
